Name: Sirea
Version: 0.1
Cabal-Version: >= 1.2
Synopsis: Simply Reactive! Declarative orchestration in Haskell with RDP.
Category: Reactive, FRP
Description:
  Reactive Demand Programming is an effectful, declarative paradigm
  for continuous orchestration of open systems. Sirea implements RDP
  in Haskell. This particular module is the `core` of Sirea, just
  the basic behaviors and implementation. Domain specific resources
  will be provided by external libraries.
  .
  The declarative properties of RDP are achieved by constraining how
  effects are expressed and composed. In particular, effects must be
  expressed by emitting signals to control things. Signals overlap. 
  Effect models must be continuous, concurrent, and collaborative. 
  Further, RDP requires signals be treated as a set. RDP expressions 
  are consequently commutative and idempotent.
  .
  These constraints on effects require new programming idioms and 
  new state models. State models for imperative or even discrete
  time are not suitable for RDP, though many can be adapted. 
  .
  RDP does not model state internally. State must be accessed as an
  external resource, like a database. This is a boon for persistence
  and live programming, which Sirea shall eventually support by use
  of System.Plugins.
  .
  Reactivity is achieved due to propagation of signals. A behavior
  can observe mouse position, for example, and use it to control a
  window position - pulling from one source, pushing to another. In
  RDP, observation and influence are both continuous and reactive.
  The casual switch between pulling and pushing is what allows open
  systems to be composed and orchestrated.
  .
  RDP rejects "purity" as sheer fallacy. In real systems, control is
  coupled to views (it's unsafe to control something without a view)
  and efficient views require control (e.g. activate cameras, point 
  them in the right direction, on demand; load just the right values
  into memory; etc.). Pure behaviors can be modeled, but should not
  be assumed. Sirea does not provide a "pure" behavior type. 
  .
  Fortunately, commutative and idempotent expression achieves most
  benefits for reasoning and refactoring associated with pure code.
  With RDP, developers should not much miss purity. 

Author: David Barbour
Maintainer: dmbarbour@gmail.com
Homepage: http://awelon.sourceforge.net/
Package-Url: https://github.com/dmbarbour/Sirea
Copyright: (c) 2012 by David Barbour
License: BSD3
Stability: experimental
build-type: Simple

Library
  hs-Source-Dirs: src
  Extensions:
  Build-Depends: base>4.5
    ,parallel>3
    ,time

  Exposed-Modules:
    FRP.Sirea.Time
    FRP.Sirea.Signal
    FRP.Sirea.Behavior

  ghc-options: -threaded -Wall -fno-warn-orphans 


